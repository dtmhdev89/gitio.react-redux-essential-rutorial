{"version":3,"sources":["app/Navbar.js","features/posts/PostAuthor.js","features/posts/TimeAgo.js","features/posts/postsSlice.js","features/posts/ReactionButtons.jsx","features/posts/PostsList.js","features/posts/AddPostForm.js","features/posts/SinglePostPage.js","features/posts/EditPostForm.js","App.js","api/server.js","features/users/usersSlice.js","app/store.js","index.js"],"names":["Navbar","className","to","PostAuthor","userId","author","useSelector","state","users","find","user","id","name","TimeAgo","timestamp","timeAgo","date","parseISO","timePeriod","formatDistanceToNow","title","initialState","content","sub","Date","minutes","toISOString","reactions","thumbsUp","hooray","heart","rocket","eyes","postsSlice","createSlice","reducers","reactionAdded","action","payload","postId","reaction","existingPost","post","postAdded","reducer","push","prepare","nanoid","postUpdated","actions","reactionEmoji","ReactionButtons","dispatch","useDispatch","reactionButtons","Object","entries","map","emoji","key","type","onClick","PostsList","renderedPosts","posts","slice","sort","a","b","localeCompare","substring","AddPostForm","useState","setTitle","setContent","setUserId","canSave","Boolean","usersOptions","value","htmlFor","onChange","e","target","disabled","SinglePostPage","match","params","EditPostForm","history","useHistory","placeholder","App","seedDate","exact","path","render","Fragment","component","usersSlice","configureStore","postsReducer","usersReducer","IdSerializer","RestSerializer","extend","serializeIds","rng","seedrandom","randomSeedString","localStorage","getItem","getRandomInt","min","max","Math","ceil","floor","setItem","setRandom","faker","seed","getTime","randomFromArray","array","length","notificationTemplates","Server","routes","this","namespace","resource","server","schema","req","data","normalizedRequestAttrs","Error","create","get","comments","pastDate","numNotifications","now","queryParams","since","valueOf","setMinutes","getMinutes","notifications","Array","db","template","between","message","read","isNew","models","Model","hasMany","belongsTo","comment","notification","factories","Factory","firstName","lastName","findName","username","internet","userName","afterCreate","createList","sentence","recent","article","association","past","text","paragraph","serializers","seeds","ReactDOM","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.86fa737a.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport const Navbar = () => {\n  return (\n    <nav>\n      <section>\n        <h1>Redux Essentials Example</h1>\n\n        <div className=\"navContent\">\n          <div className=\"navLinks\">\n            <Link to=\"/\">Posts</Link>\n          </div>\n        </div>\n      </section>\n    </nav>\n  )\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nexport const PostAuthor = ({ userId }) => {\n  const author = useSelector(state => state.users.find(user => user.id === userId));\n\n  return <span> by {author ? author.name : 'Unknown author'}</span>\n}\n","import React from 'react';\nimport { parseISO, formatDistanceToNow } from 'date-fns';\n\nexport const TimeAgo = ({ timestamp }) => {\n  let timeAgo = '';\n  if (timestamp) {\n    const date = parseISO(timestamp);\n    const timePeriod = formatDistanceToNow(date);\n    timeAgo = `${timePeriod} ago`;\n  }\n\n  return (\n    <span title={timestamp}>&nbsp; <i>{timeAgo}</i></span>\n  )\n}\n","import { createSlice, nanoid } from '@reduxjs/toolkit';\nimport { sub } from 'date-fns';\n\nconst initialState = [\n  {\n    id: '1',\n    title: 'First Post!',\n    content: 'Hello!',\n    date: sub(new Date(), {minutes: 10}).toISOString(),\n    reactions: {\n      thumbsUp: 0,\n      hooray: 0,\n      heart: 0,\n      rocket: 0,\n      eyes: 0,\n    }\n  },\n  {\n    id: '2',\n    title: 'Second Post',\n    content: 'More text',\n    date: sub(new Date(), {minutes: 5}).toISOString(),\n    reactions: {\n      thumbsUp: 0,\n      hooray: 0,\n      heart: 0,\n      rocket: 0,\n      eyes: 0,\n    }\n  }\n];\n\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    reactionAdded: (state, action) => {\n      const { postId, reaction } = action.payload;\n      const existingPost = state.find(post => post.id === postId)\n      if (existingPost) {\n        existingPost.reactions[reaction]++\n      }\n    },\n    postAdded: {\n      reducer:  (state, action) => {\n        state.push(action.payload);\n      },\n      prepare: (title, content, userId) => {\n        return {\n          payload: {\n            id: nanoid(),\n            title,\n            content,\n            user: userId,\n            date: new Date().toISOString(),\n            reactions: {\n              thumbsUp: 0,\n              hooray: 0,\n              heart: 0,\n              rocket: 0,\n              eyes: 0,\n            }\n          }\n        }\n      }\n    },\n    postUpdated: (state, action) => {\n      const { id, title, content, userId } = action.payload;\n      const existingPost = state.find(post => post.id === id)\n      if (existingPost) {\n        existingPost.title = title;\n        existingPost.content = content;\n        existingPost.user = userId\n      }\n    }\n  }\n});\n\nexport const { postAdded, postUpdated, reactionAdded } = postsSlice.actions;\n\nexport default postsSlice.reducer;\n","import React from 'react'\nimport { useDispatch } from 'react-redux'\n\nimport { reactionAdded } from './postsSlice'\n\nconst reactionEmoji = {\n  thumbsUp: '👍',\n  hooray: '🎉',\n  heart: '❤️',\n  rocket: '🚀',\n  eyes: '👀'\n}\n\nexport const ReactionButtons = ({ post }) => {\n  const dispatch = useDispatch()\n  const reactionButtons = Object.entries(reactionEmoji).map(([name, emoji]) => {\n    return (\n      <button\n        key={name}\n        type=\"button\"\n        className=\"muted-button reaction-button\"\n        onClick={() => dispatch(reactionAdded({postId: post.id, reaction: name}))}\n        >\n        {emoji} {post.reactions[name]}\n      </button>\n    )\n  })\n\n  return <div>{reactionButtons}</div>\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { PostAuthor } from './PostAuthor';\nimport { TimeAgo } from './TimeAgo';\nimport { ReactionButtons } from './ReactionButtons'\n\nexport const PostsList = () => {\n  const posts = useSelector(state => state.posts);\n  const orderedPosts = posts.slice().sort((a, b) => b.date.localeCompare(a.date))\n\n  const renderedPosts = orderedPosts.map(post => (\n    <article className=\"post-excerpt\" key={post.id}>\n      <h3>{post.title}</h3>\n      <div>\n        <PostAuthor userId={post.user} />\n        <TimeAgo timestamp={post.date} />\n      </div>\n      <p className=\"post-content\">{post.content.substring(0, 100)}</p>\n      <ReactionButtons post={post} />\n      <Link to={`/posts/${post.id}`} className=\"button muted-button\">View Post</Link>\n    </article>\n  ))\n\n  return (\n    <section className=\"posts-list\">\n      <h2>Posts</h2>\n      {renderedPosts}\n    </section>\n  )\n}\n","import React, {useState} from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { postAdded } from './postsSlice';\n\nexport const AddPostForm = () => {\n  const [title, setTitle] = useState('');\n  const [content, setContent] = useState('');\n  const [userId, setUserId] = useState('');\n\n  const dispatch = useDispatch();\n  const users = useSelector(state => state.users);\n\n  const onTitleChanged = e => setTitle(e.target.value);\n  const onContentChanged = e => setContent(e.target.value);\n  const onAuthorChanged = e => setUserId(e.target.value);\n\n  const onSavePostClicked = () => {\n    if(title && content) {\n      dispatch(postAdded(title, content, userId))\n      setTitle('');\n      setContent('');\n    }\n  }\n\n  const canSave = Boolean(title) && Boolean(content) && Boolean(userId);\n\n  const usersOptions = users.map(user => (\n    <option key={user.id} value={user.id}>{user.name}</option>\n  ))\n\n  return (\n    <section>\n      <h2>Add a New Post</h2>\n      <form>\n        <label htmlFor=\"postTitle\">Post Title:</label>\n        <input type=\"text\" id=\"postTitle\" name=\"postTitle\" value={title} onChange={onTitleChanged}/>\n        <label htmlFor=\"postAuthor\">Author:</label>\n        <select id=\"postAuthor\" value={userId} onChange={onAuthorChanged}>\n          <option value=\"\"></option>\n          {usersOptions}\n        </select>\n        <label htmlFor=\"postContent\">Content:</label>\n        <textarea type=\"text\" id=\"postContent\" name=\"postContent\" value={content} onChange={onContentChanged}/>\n        <button type=\"button\" onClick={onSavePostClicked} disabled={!canSave}>Save Post</button>\n      </form>\n    </section>\n  )\n\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\n\nimport { PostAuthor } from './PostAuthor';\nimport { ReactionButtons } from './ReactionButtons'\n\nexport const SinglePostPage = ({ match }) => {\n  const { postId } = match.params;\n\n  const post = useSelector(state =>\n    state.posts.find(post => post.id === postId)  \n  )\n\n  if (!post) {\n    return (\n      <section>\n        <h2>Post not found</h2>\n      </section>\n    )\n  }\n\n  return (\n    <section>\n      <article>\n        <h2>{post.title}</h2>\n        <p className=\"post-content\">{post.content}</p>\n        <p><PostAuthor userId={post.user} /></p>\n        <ReactionButtons post={post}/>\n        <Link to={`/editPost/${post.id}`} className=\"button\">Edit Post</Link>\n      </article>\n    </section>\n  )\n}\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\nimport { postUpdated } from './postsSlice';\n\nexport const EditPostForm = ({ match }) => {\n  const { postId } = match.params;\n\n  const post = useSelector(state =>\n    state.posts.find(post => post.id === postId)  \n  )\n  const users = useSelector(state => state.users)\n\n  const [title, setTitle] = useState(post.title);\n  const [content, setContent] = useState(post.content);\n  const [userId, setUserId] = useState(post.user);\n\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const onTitleChanged = e => setTitle(e.target.value);\n  const onContentChanged = e => setContent(e.target.value);\n  const onAuthorChanged = e => setUserId(e.target.value);\n\n  const onSavePostClicked = () => {\n    if (title && content) {\n      dispatch(postUpdated({id: postId, title, content, userId}))\n      history.push(`/posts/${postId}`)\n    }\n  }\n\n  const canSave = Boolean(title) && Boolean(content) && Boolean(userId);\n\n  const usersOptions = users.map(user => (\n    <option key={user.id} value={user.id}>{user.name}</option>\n  ))\n\n  return (\n    <section>\n      <h2>Edit Post</h2>\n      <form>\n        <label htmlFor=\"postTitle\">Post Title:</label>\n        <input type=\"text\" id=\"postTitle\" name=\"postTitle\" placeholder=\"What's on your mind?\"\n          value={title} onChange={onTitleChanged} />\n        <select id=\"postAuthor\" value={userId} onChange={onAuthorChanged}>\n          <option value=\"\"></option>\n          {usersOptions}\n        </select>\n        <label htmlFor=\"postContent\">Content:</label>\n        <textarea id=\"postContent\" name=\"postContent\" value={content} onChange={onContentChanged} />\n      </form>\n      <button type=\"button\" onClick={onSavePostClicked} disabled={!canSave}>Save Post</button>\n    </section>\n  )\n}\n","import React from 'react'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from 'react-router-dom'\n\nimport { Navbar } from './app/Navbar'\n\nimport { PostsList } from './features/posts/PostsList';\nimport { AddPostForm } from './features/posts/AddPostForm';\nimport { SinglePostPage } from './features/posts/SinglePostPage';\nimport { EditPostForm } from './features/posts/EditPostForm';\n\nfunction App() {\n  return (\n    <Router>\n      <Navbar />\n      <div className=\"App\">\n        <Switch>\n          <Route\n            exact\n            path=\"/\"\n            render={() => (\n              <React.Fragment>\n                <AddPostForm />\n                <PostsList />\n              </React.Fragment>\n            )}\n          />\n          <Route exact path=\"/posts/:postId\" component={SinglePostPage} />\n          <Route exact path=\"/editPost/:postId\" component={EditPostForm} />\n          <Redirect to=\"/\" />\n        </Switch>\n      </div>\n    </Router>\n  )\n}\n\nexport default App\n","import {\n  Server,\n  Model,\n  Factory,\n  belongsTo,\n  hasMany,\n  association,\n  RestSerializer,\n} from 'miragejs'\n\nimport { nanoid } from '@reduxjs/toolkit'\n\nimport faker from 'faker'\nimport { sentence, paragraph, article, setRandom } from 'txtgen'\nimport { parseISO } from 'date-fns'\nimport seedrandom from 'seedrandom'\n\nconst IdSerializer = RestSerializer.extend({\n  serializeIds: 'always',\n})\n\n// Set up a seeded random number generator, so that we get\n// a consistent set of users / entries each time the page loads.\n// This can be reset by deleting this localStorage value,\n// or turned off by setting `useSeededRNG` to false.\nlet useSeededRNG = true\n\nlet rng = seedrandom()\n\nif (useSeededRNG) {\n  let randomSeedString = localStorage.getItem('randomTimestampSeed')\n  let seedDate\n\n  if (randomSeedString) {\n    seedDate = new Date(randomSeedString)\n  } else {\n    seedDate = new Date()\n    randomSeedString = seedDate.toISOString()\n    localStorage.setItem('randomTimestampSeed', randomSeedString)\n  }\n\n  rng = seedrandom(randomSeedString)\n  setRandom(rng)\n  faker.seed(seedDate.getTime())\n}\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min)\n  max = Math.floor(max)\n  return Math.floor(rng() * (max - min + 1)) + min\n}\n\nconst randomFromArray = (array) => {\n  const index = getRandomInt(0, array.length - 1)\n  return array[index]\n}\n\nconst notificationTemplates = [\n  'poked you',\n  'says hi!',\n  `is glad we're friends`,\n  'sent you a gift',\n]\n\nnew Server({\n  routes() {\n    this.namespace = 'fakeApi'\n    //this.timing = 2000\n\n    this.resource('users')\n    this.resource('posts')\n    this.resource('comments')\n\n    const server = this\n\n    this.post('/posts', function (schema, req) {\n      const data = this.normalizedRequestAttrs()\n      data.date = new Date().toISOString()\n      // Work around some odd behavior by Mirage that's causing an extra\n      // user entry to be created unexpectedly when we only supply a userId.\n      // It really want an entire Model passed in as data.user for some reason.\n      const user = schema.users.find(data.userId)\n      data.user = user\n\n      if (data.content === 'error') {\n        throw new Error('Could not save the post!')\n      }\n\n      const result = server.create('post', data)\n      return result\n    })\n\n    this.get('/posts/:postId/comments', (schema, req) => {\n      const post = schema.posts.find(req.params.postId)\n      return post.comments\n    })\n\n    this.get('/notifications', (schema, req) => {\n      const numNotifications = getRandomInt(1, 5)\n\n      let pastDate\n\n      const now = new Date()\n\n      if (req.queryParams.since) {\n        pastDate = parseISO(req.queryParams.since)\n      } else {\n        pastDate = new Date(now.valueOf())\n        pastDate.setMinutes(pastDate.getMinutes() - 15)\n      }\n\n      // Create N random notifications. We won't bother saving these\n      // in the DB - just generate a new batch and return them.\n      const notifications = [...Array(numNotifications)].map(() => {\n        const user = randomFromArray(schema.db.users)\n        const template = randomFromArray(notificationTemplates)\n        return {\n          id: nanoid(),\n          date: faker.date.between(pastDate, now).toISOString(),\n          message: template,\n          user: user.id,\n          read: false,\n          isNew: true,\n        }\n      })\n\n      return { notifications }\n    })\n  },\n  models: {\n    user: Model.extend({\n      posts: hasMany(),\n    }),\n    post: Model.extend({\n      user: belongsTo(),\n      comments: hasMany(),\n    }),\n    comment: Model.extend({\n      post: belongsTo(),\n    }),\n    notification: Model.extend({}),\n  },\n  factories: {\n    user: Factory.extend({\n      id() {\n        return nanoid()\n      },\n      firstName() {\n        return faker.name.firstName()\n      },\n      lastName() {\n        return faker.name.lastName()\n      },\n      name() {\n        return faker.name.findName(this.firstName, this.lastName)\n      },\n      username() {\n        return faker.internet.userName(this.firstName, this.lastName)\n      },\n\n      afterCreate(user, server) {\n        server.createList('post', 3, { user })\n      },\n    }),\n    post: Factory.extend({\n      id() {\n        return nanoid()\n      },\n      title() {\n        return sentence()\n      },\n      date() {\n        return faker.date.recent(7)\n      },\n      content() {\n        return article(1)\n      },\n      reactions() {\n        return {\n          thumbsUp: 0,\n          hooray: 0,\n          heart: 0,\n          rocket: 0,\n          eyes: 0,\n        }\n      },\n      afterCreate(post, server) {\n        //server.createList('comment', 3, { post })\n      },\n\n      user: association(),\n    }),\n    comment: Factory.extend({\n      id() {\n        return nanoid()\n      },\n      date() {\n        return faker.date.past(2)\n      },\n      text() {\n        return paragraph()\n      },\n      post: association(),\n    }),\n  },\n  serializers: {\n    user: IdSerializer,\n    post: IdSerializer,\n    comment: IdSerializer,\n  },\n  seeds(server) {\n    server.createList('user', 3)\n  },\n})\n","import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = [\n  {id: '0', name: 'Tianan Jenkins'},\n  {id: '1', name: 'Kevin Grant'},\n  {id: '2', name: 'Madison Price'}\n]\n\nconst usersSlice = createSlice({\n  name: 'users',\n  initialState,\n  reducers: {}\n})\n\nexport default usersSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\n\nimport postsReducer from '../features/posts/postsSlice';\nimport usersReducer from '../features/users/usersSlice';\n\nexport default configureStore({\n  reducer: {\n    posts: postsReducer,\n    users: usersReducer\n  }\n});\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport store from './app/store'\nimport { Provider } from 'react-redux'\n\nimport './api/server'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}